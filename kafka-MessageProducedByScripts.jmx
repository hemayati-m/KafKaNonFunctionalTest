<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1 r1853635">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="kafka" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="kafka-producer" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.internals.RecordHeader;
import org.apache.kafka.common.header.Headers;
import org.apache.kafka.common.header.internals.RecordHeaders;

Properties props = new Properties();
props.put(&quot;zookeeper.connect&quot;, &quot;&lt;server-name&gt;:&lt;port&gt;,&lt;server-name&gt;:&lt;port&gt;&quot;);
props.put(&quot;bootstrap.servers&quot;, &quot;&lt;server-name&gt;:&lt;port&gt;,&lt;server-name&gt;:&lt;port&gt;&quot;);
props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);
props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);
props.put(&quot;compression.type&quot;, &quot;none&quot;);
props.put(&quot;batch.size&quot;, &quot;16384&quot;);
props.put(&quot;linger.ms&quot;, &quot;0&quot;);
props.put(&quot;buffer.memory&quot;, &quot;33554432&quot;);
props.put(&quot;acks&quot;, &quot;1&quot;);
props.put(&quot;send.buffer.bytes&quot;, &quot;131072&quot;);
props.put(&quot;receive.buffer.bytes&quot;, &quot;32768&quot;);
props.put(&quot;security.protocol&quot;, &quot;SSL&quot;);
props.put(&quot;sasl.kerberos.service.name&quot;, &quot;kafka&quot;);
props.put(&quot;sasl.mechanism&quot;, &quot;GSSAPI&quot;);
props.put(&quot;ssl.key.password&quot;, &quot;&lt;ssl-key-password&gt;&quot;);
props.put(&quot;ssl.keystore.location&quot;, &quot;&lt;keystore-location&gt;&quot;);
props.put(&quot;ssl.keystore.password&quot;, &quot;&lt;keystore-password&gt;&quot;);
props.put(&quot;ssl.keystore.type&quot;, &quot;JKS&quot;);
props.put(&quot;ssl.truststore.location&quot;, &quot;&lt;truststore-location&gt;&quot;);
props.put(&quot;ssl.truststore.password&quot;, &quot;&lt;truststore-password&gt;&quot;);
props.put(&quot;ssl.truststore.type&quot;, &quot;JKS&quot;);


KafkaProducer&lt;String, String&gt; producer = new KafkaProducer&lt;String, String&gt;(props);

List&lt;Header&gt; headers = new ArrayList&lt;Header&gt;();
        headers.add(new RecordHeader(&quot;schemaVersion&quot;, &quot;1.0&quot;.getBytes()));
        headers.add(new RecordHeader(&quot;messageType&quot;,&quot;OCTOPERF_TEST_MESSAGE&quot;.getBytes()));

producer.send(producerRecord);
producer.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
